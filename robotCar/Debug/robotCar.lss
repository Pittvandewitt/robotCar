
robotCar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c60  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b5  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000514  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b2  00000000  00000000  000021ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  9e:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_4>:
	}
}


ISR(PCINT1_vect)								//If pinstate in PB1 changes start interrupt
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	if (i==0)									//First enable counter (i starts at 0 so this executes first)
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  c0:	89 2b       	or	r24, r25
  c2:	59 f4       	brne	.+22     	; 0xda <__vector_4+0x34>
	{
		TCCR1B	|=	(1<<CS10);					//Start counter
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	80 83       	st	Z, r24
		i=1;									//Set i to 1 so other if-statement executes next time pinstate changes
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}

	if (i==1)									//Pinstate changes again so this if statement is now executed as i = 1
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	81 f4       	brne	.+32     	; 0x106 <__vector_4+0x60>
	{
		TCCR1B	=	0;							//Stop counter
  e6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		pulse	=	TCNT1;						//pulse is counter value
  ea:	e4 e8       	ldi	r30, 0x84	; 132
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	91 81       	ldd	r25, Z+1	; 0x01
  f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <pulse+0x1>
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pulse>
		TCNT1	=	0;							//reset counter value
  fa:	11 82       	std	Z+1, r1	; 0x01
  fc:	10 82       	st	Z, r1
		i = 0;									//reset i to 0 so counter starts on next pinstate change, count is needed to calculate distance
  fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 102:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	}
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <lineTracker>:

#include <lineTracker.h>

int lineTracker(void)
{
	DDRB |= (1<<DDB5);
 118:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= (1<<DDB4);
 11a:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= (1<<DDB3);
 11c:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= (1<<DDB2);
 11e:	22 9a       	sbi	0x04, 2	; 4
	DDRC &= ~(1<<DDC0);
 120:	38 98       	cbi	0x07, 0	; 7
	
	while (1)
	{
		if((PINC & 0b00000001) == 0)	//PINC.0
 122:	30 99       	sbic	0x06, 0	; 6
 124:	02 c0       	rjmp	.+4      	; 0x12a <lineTracker+0x12>
		{
			LED5_ON;					// Detected
 126:	2d 9a       	sbi	0x05, 5	; 5
 128:	01 c0       	rjmp	.+2      	; 0x12c <lineTracker+0x14>
		}
		else {
			LED5_OFF;					//B5 off
 12a:	2d 98       	cbi	0x05, 5	; 5
		}
		
		if((PINC & 0b00000010) == 0)	//PINC.1
 12c:	31 99       	sbic	0x06, 1	; 6
 12e:	02 c0       	rjmp	.+4      	; 0x134 <lineTracker+0x1c>
		{
			LED4_ON;					// Detected
 130:	2c 9a       	sbi	0x05, 4	; 5
 132:	01 c0       	rjmp	.+2      	; 0x136 <lineTracker+0x1e>
		}
		else {
			LED4_OFF;					//B4 off
 134:	2c 98       	cbi	0x05, 4	; 5
		}
		
		if((PINC & 0b00000100) == 0)	//PINC.2
 136:	32 99       	sbic	0x06, 2	; 6
 138:	02 c0       	rjmp	.+4      	; 0x13e <lineTracker+0x26>
		{
			LED3_ON;					// Detected
 13a:	2b 9a       	sbi	0x05, 3	; 5
 13c:	01 c0       	rjmp	.+2      	; 0x140 <lineTracker+0x28>
		}
		else {
			LED3_OFF;					//B3 off
 13e:	2b 98       	cbi	0x05, 3	; 5
		}
		
		if((PINC & 0b00001000) == 0)	//PINC.3
 140:	33 99       	sbic	0x06, 3	; 6
 142:	02 c0       	rjmp	.+4      	; 0x148 <lineTracker+0x30>
		{
			LED2_ON;					// Detected
 144:	2a 9a       	sbi	0x05, 2	; 5
 146:	ed cf       	rjmp	.-38     	; 0x122 <lineTracker+0xa>
		}
		else {
			LED2_OFF;					//B2 off
 148:	2a 98       	cbi	0x05, 2	; 5
 14a:	eb cf       	rjmp	.-42     	; 0x122 <lineTracker+0xa>

0000014c <main>:
#include <avr/interrupt.h>
#include <stdlib.h>

int main(void) 
{
	lineTracker();
 14c:	0e 94 8c 00 	call	0x118	; 0x118 <lineTracker>
}
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	08 95       	ret

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
