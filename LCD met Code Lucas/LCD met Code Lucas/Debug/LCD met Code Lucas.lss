
LCD met Code Lucas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000003ba  0000044e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080011a  0080011a  00000468  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d18  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081b  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000507  00000000  00000000  00001a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060b  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002a57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  9e:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_4>:

	return 1;
}

ISR(PCINT1_vect)								//If PORTC interrupts (on PCINT13 pin state change) fire ISR
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	if (i==1)									//this has to be executed second, because this stops the timer
  b8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  bc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	81 f4       	brne	.+32     	; 0xe4 <__vector_4+0x3e>
												//i starts at 0 that is why this if-statement has i == 1.
	{
		TCCR1B	=	0;							//Stop timer
  c4:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		pulse	=	TCNT1;						//store counter in pulse, for calculating distance
  c8:	e4 e8       	ldi	r30, 0x84	; 132
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pulse+0x1>
  d4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pulse>
		TCNT1	=	0;							//reset counter
  d8:	11 82       	std	Z+1, r1	; 0x01
  da:	10 82       	st	Z, r1
		
		i = 0;									//reset i to 0 so timer starts in next if statement
  dc:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
  e0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
		
	}
	
	if (i==0)									//First enable timer (i starts at 0 so this executes first)
  e4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
  e8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <__data_end+0x1>
  ec:	89 2b       	or	r24, r25
  ee:	59 f4       	brne	.+22     	; 0x106 <__vector_4+0x60>
	{
		TCCR1B	|=	(1<<CS10);					//Start timer
  f0:	e1 e8       	ldi	r30, 0x81	; 129
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 83       	st	Z, r24
		
		i = 1;									//Set i to 1 so timer is stopped and counter is used to calculate distance next interrupt
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__data_end+0x1>
 102:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
	}
	
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <wrcomm>:
	}
	return 1;
}
int wrcomm(void)
{
	commport &= ~(1 << rs);     //selecting command register
 118:	2c 98       	cbi	0x05, 4	; 5
	commport &= ~(1 << wr);     //selecting write mode
 11a:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e1       	ldi	r24, 0x1F	; 31
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <wrcomm+0x8>
 124:	00 c0       	rjmp	.+0      	; 0x126 <wrcomm+0xe>
 126:	00 00       	nop
	_delay_us(200);
	commport |= 1 << en;        //EN = 1
 128:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e9       	ldi	r24, 0x9F	; 159
 12c:	9f e0       	ldi	r25, 0x0F	; 15
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <wrcomm+0x16>
 132:	00 c0       	rjmp	.+0      	; 0x134 <wrcomm+0x1c>
 134:	00 00       	nop
	_delay_ms(1);
	commport &= ~(1 << en);     //EN = 0
 136:	2b 98       	cbi	0x05, 3	; 5
 138:	8f e9       	ldi	r24, 0x9F	; 159
 13a:	9f e0       	ldi	r25, 0x0F	; 15
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <wrcomm+0x24>
 140:	00 c0       	rjmp	.+0      	; 0x142 <wrcomm+0x2a>
 142:	00 00       	nop
	_delay_ms(1);
	return 1;
}
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret

0000014a <LCD_Init>:

int LCD_Init(void)
{

	//Function set
	dataport = 0x38;    //0b00111000, DL = "Low", 8-bit mode; N = "high", 2-line display; F=0, 5x8 display
 14a:	88 e3       	ldi	r24, 0x38	; 56
 14c:	8b b9       	out	0x0b, r24	; 11
	wrcomm();
 14e:	0e 94 8c 00 	call	0x118	; 0x118 <wrcomm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	87 ec       	ldi	r24, 0xC7	; 199
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_Init+0xc>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_Init+0x12>
 15c:	00 00       	nop
	_delay_us(50);

	//clear LCD screen
	dataport = 0x01;    //clear screen
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	8b b9       	out	0x0b, r24	; 11
	wrcomm();
 162:	0e 94 8c 00 	call	0x118	; 0x118 <wrcomm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8f e3       	ldi	r24, 0x3F	; 63
 168:	9f e1       	ldi	r25, 0x1F	; 31
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Init+0x20>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Init+0x26>
 170:	00 00       	nop
	_delay_ms(2);

	//display on/off control
	dataport = 0x0e;    //0b00001110, D=1, display is turned on; C=1, cursor is turned on; B=0, blink is off
 172:	8e e0       	ldi	r24, 0x0E	; 14
 174:	8b b9       	out	0x0b, r24	; 11
	wrcomm();
 176:	0e 94 8c 00 	call	0x118	; 0x118 <wrcomm>

	//cursor at line 1
	dataport = 0x80;
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	8b b9       	out	0x0b, r24	; 11
	wrcomm();
 17e:	0e 94 8c 00 	call	0x118	; 0x118 <wrcomm>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	87 ec       	ldi	r24, 0xC7	; 199
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Init+0x3c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Init+0x42>
 18c:	00 00       	nop
	_delay_us(50);

	//entry mode set
	dataport = 0x06;
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	8b b9       	out	0x0b, r24	; 11
 192:	87 ec       	ldi	r24, 0xC7	; 199
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Init+0x4c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Init+0x52>
 19c:	00 00       	nop
	_delay_us(50);

	//cursor or display shift
	dataport = 0x1C;    //0b00011100, S/C=1, R/L=1, shift all the display to the right, cursor moves according to the display
 19e:	8c e1       	ldi	r24, 0x1C	; 28
 1a0:	8b b9       	out	0x0b, r24	; 11
	wrcomm();
 1a2:	0e 94 8c 00 	call	0x118	; 0x118 <wrcomm>
 1a6:	87 ec       	ldi	r24, 0xC7	; 199
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_Init+0x60>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_Init+0x66>
 1b0:	00 00       	nop
	_delay_us(50);

	return 1;

}
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret

000001b8 <wrdata>:
	_delay_ms(1);
	return 1;
}
int wrdata(void)
{
	commport |= 1 << rs;        //selecting data register
 1b8:	2c 9a       	sbi	0x05, 4	; 5
	commport &= ~(1 << wr);     //selecting write mode
 1ba:	2d 98       	cbi	0x05, 5	; 5
 1bc:	8f e1       	ldi	r24, 0x1F	; 31
 1be:	93 e0       	ldi	r25, 0x03	; 3
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <wrdata+0x8>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <wrdata+0xe>
 1c6:	00 00       	nop
	_delay_us(200);
	commport |= 1 << en;        //EN = 1
 1c8:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	8f e9       	ldi	r24, 0x9F	; 159
 1cc:	9f e0       	ldi	r25, 0x0F	; 15
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <wrdata+0x16>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <wrdata+0x1c>
 1d4:	00 00       	nop
	_delay_ms(1);
	commport &= ~(1 << en);     //EN = 0
 1d6:	2b 98       	cbi	0x05, 3	; 5
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <wrdata+0x24>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <wrdata+0x2a>
 1e2:	00 00       	nop
	_delay_ms(1);
	return 1;
}
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 95       	ret

000001ea <LCD_SendData>:
	return 1;

}

int LCD_SendData(const char *s)
{
 1ea:	ef 92       	push	r14
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	8c 01       	movw	r16, r24
 1f8:	7c 01       	movw	r14, r24
	const char *j = s;
	int i;
	for (i = 0; i < strlen(j); i++)
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <LCD_SendData+0x24>
	{
		dataport = j[i];
 200:	f7 01       	movw	r30, r14
 202:	81 91       	ld	r24, Z+
 204:	7f 01       	movw	r14, r30
 206:	8b b9       	out	0x0b, r24	; 11
		wrdata();
 208:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <wrdata>

int LCD_SendData(const char *s)
{
	const char *j = s;
	int i;
	for (i = 0; i < strlen(j); i++)
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	f8 01       	movw	r30, r16
 210:	01 90       	ld	r0, Z+
 212:	00 20       	and	r0, r0
 214:	e9 f7       	brne	.-6      	; 0x210 <LCD_SendData+0x26>
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	e0 1b       	sub	r30, r16
 21a:	f1 0b       	sbc	r31, r17
 21c:	ce 17       	cp	r28, r30
 21e:	df 07       	cpc	r29, r31
 220:	78 f3       	brcs	.-34     	; 0x200 <LCD_SendData+0x16>
	{
		dataport = j[i];
		wrdata();
	}
	return 1;
}
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	ff 90       	pop	r15
 230:	ef 90       	pop	r14
 232:	08 95       	ret

00000234 <main>:

static volatile int pulse = 0;					//used to store counter value for calculating distance
static volatile int i = 0;						//used for starting and stopping counter at pinstate change

int main(void)
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	60 97       	sbiw	r28, 0x10	; 16
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b11111111;
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111111;    //set portD 4,5,6 as output pins
 24c:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b00000000;
 24e:	17 b8       	out	0x07, r1	; 7
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	89 e6       	ldi	r24, 0x69	; 105
 254:	98 e1       	ldi	r25, 0x18	; 24
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x22>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x2c>
 260:	00 00       	nop
	_delay_ms(500);
	
	PCICR	|= (1<<PCIE1);						//Enabled Pin Change Interrupt 0:7
 262:	e8 e6       	ldi	r30, 0x68	; 104
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	80 83       	st	Z, r24
	PCMSK1	|= (1<<PCINT13);					//Pin Change Interrupt on PB1 enabled
 26c:	ec e6       	ldi	r30, 0x6C	; 108
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 62       	ori	r24, 0x20	; 32
 274:	80 83       	st	Z, r24
	
	int16_t distance = 0;						//declared 16 bit integer COUNTA = 0
	    
	char sendToLCD [16];						//declared string to send to LCD

	LCD_Init();
 276:	0e 94 a5 00 	call	0x14a	; 0x14a <LCD_Init>
	
	sei();
 27a:	78 94       	sei
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 27c:	0f 2e       	mov	r0, r31
 27e:	f0 ea       	ldi	r31, 0xA0	; 160
 280:	ef 2e       	mov	r14, r31
 282:	f3 e0       	ldi	r31, 0x03	; 3
 284:	ff 2e       	mov	r15, r31
 286:	f0 2d       	mov	r31, r0
		distance = pulse/58/16;					//Duration of pulse/58/16 (16Mhz means 16 pulses per us) is distance in CM		
		
		itoa(distance, sendToLCD, 10);			//Converting int distance to char sendToLCD in decimals
		
		
		dataport = 0x80;
 288:	00 e8       	ldi	r16, 0x80	; 128
		wrcomm();
		
		LCD_SendData("ONS PROJECT");
		
		dataport = (0xC0);
 28a:	10 ec       	ldi	r17, 0xC0	; 192
	
	sei();
	
	while (1)
	{
		PORTB	&=	~(1<<PINB0);				//OUTPUT LOW for clear HIGH
 28c:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	2a e1       	ldi	r18, 0x1A	; 26
 290:	2a 95       	dec	r18
 292:	f1 f7       	brne	.-4      	; 0x290 <main+0x5c>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x62>
		_delay_us(5);
		
		PORTB	|=	(1<<PINB0);					//OUTPUT trigger HIGH
 296:	28 9a       	sbi	0x05, 0	; 5
 298:	80 e5       	ldi	r24, 0x50	; 80
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0x66>
		_delay_us(15);							//trigger signal must be at least 10uS, 15uS for safety
		
		PORTB	&=	~(1<<PINB0);				//OUTPUT trigger LOW
 29e:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a0:	9f ef       	ldi	r25, 0xFF	; 255
 2a2:	20 e7       	ldi	r18, 0x70	; 112
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	91 50       	subi	r25, 0x01	; 1
 2a8:	20 40       	sbci	r18, 0x00	; 0
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x72>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x7c>
 2b0:	00 00       	nop
		_delay_ms(50);							//Delay for clear signal
		
		distance = pulse/58/16;					//Duration of pulse/58/16 (16Mhz means 16 pulses per us) is distance in CM		
 2b2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <pulse>
 2b6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <pulse+0x1>
 2ba:	b7 01       	movw	r22, r14
 2bc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__divmodhi4>
 2c0:	cb 01       	movw	r24, r22
 2c2:	4a e0       	ldi	r20, 0x0A	; 10
 2c4:	be 01       	movw	r22, r28
 2c6:	6f 5f       	subi	r22, 0xFF	; 255
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ca:	0e 94 a6 01 	call	0x34c	; 0x34c <__itoa_ncheck>
		
		itoa(distance, sendToLCD, 10);			//Converting int distance to char sendToLCD in decimals
		
		
		dataport = 0x80;
 2ce:	0b b9       	out	0x0b, r16	; 11
		wrcomm();
 2d0:	0e 94 8c 00 	call	0x118	; 0x118 <wrcomm>
		
		LCD_SendData("ONS PROJECT");
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_SendData>
		
		dataport = (0xC0);
 2dc:	1b b9       	out	0x0b, r17	; 11
		wrcomm();
 2de:	0e 94 8c 00 	call	0x118	; 0x118 <wrcomm>
		
		LCD_SendData("AFSTAND = ");
 2e2:	8c e0       	ldi	r24, 0x0C	; 12
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_SendData>
		LCD_SendData(sendToLCD);
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_SendData>
		LCD_SendData("cm");
 2f2:	87 e1       	ldi	r24, 0x17	; 23
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_SendData>
 2fa:	c8 cf       	rjmp	.-112    	; 0x28c <main+0x58>

000002fc <__divmodhi4>:
 2fc:	97 fb       	bst	r25, 7
 2fe:	07 2e       	mov	r0, r23
 300:	16 f4       	brtc	.+4      	; 0x306 <__divmodhi4+0xa>
 302:	00 94       	com	r0
 304:	07 d0       	rcall	.+14     	; 0x314 <__divmodhi4_neg1>
 306:	77 fd       	sbrc	r23, 7
 308:	09 d0       	rcall	.+18     	; 0x31c <__divmodhi4_neg2>
 30a:	0e 94 92 01 	call	0x324	; 0x324 <__udivmodhi4>
 30e:	07 fc       	sbrc	r0, 7
 310:	05 d0       	rcall	.+10     	; 0x31c <__divmodhi4_neg2>
 312:	3e f4       	brtc	.+14     	; 0x322 <__divmodhi4_exit>

00000314 <__divmodhi4_neg1>:
 314:	90 95       	com	r25
 316:	81 95       	neg	r24
 318:	9f 4f       	sbci	r25, 0xFF	; 255
 31a:	08 95       	ret

0000031c <__divmodhi4_neg2>:
 31c:	70 95       	com	r23
 31e:	61 95       	neg	r22
 320:	7f 4f       	sbci	r23, 0xFF	; 255

00000322 <__divmodhi4_exit>:
 322:	08 95       	ret

00000324 <__udivmodhi4>:
 324:	aa 1b       	sub	r26, r26
 326:	bb 1b       	sub	r27, r27
 328:	51 e1       	ldi	r21, 0x11	; 17
 32a:	07 c0       	rjmp	.+14     	; 0x33a <__udivmodhi4_ep>

0000032c <__udivmodhi4_loop>:
 32c:	aa 1f       	adc	r26, r26
 32e:	bb 1f       	adc	r27, r27
 330:	a6 17       	cp	r26, r22
 332:	b7 07       	cpc	r27, r23
 334:	10 f0       	brcs	.+4      	; 0x33a <__udivmodhi4_ep>
 336:	a6 1b       	sub	r26, r22
 338:	b7 0b       	sbc	r27, r23

0000033a <__udivmodhi4_ep>:
 33a:	88 1f       	adc	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	5a 95       	dec	r21
 340:	a9 f7       	brne	.-22     	; 0x32c <__udivmodhi4_loop>
 342:	80 95       	com	r24
 344:	90 95       	com	r25
 346:	bc 01       	movw	r22, r24
 348:	cd 01       	movw	r24, r26
 34a:	08 95       	ret

0000034c <__itoa_ncheck>:
 34c:	bb 27       	eor	r27, r27
 34e:	4a 30       	cpi	r20, 0x0A	; 10
 350:	31 f4       	brne	.+12     	; 0x35e <__itoa_ncheck+0x12>
 352:	99 23       	and	r25, r25
 354:	22 f4       	brpl	.+8      	; 0x35e <__itoa_ncheck+0x12>
 356:	bd e2       	ldi	r27, 0x2D	; 45
 358:	90 95       	com	r25
 35a:	81 95       	neg	r24
 35c:	9f 4f       	sbci	r25, 0xFF	; 255
 35e:	0c 94 b2 01 	jmp	0x364	; 0x364 <__utoa_common>

00000362 <__utoa_ncheck>:
 362:	bb 27       	eor	r27, r27

00000364 <__utoa_common>:
 364:	fb 01       	movw	r30, r22
 366:	55 27       	eor	r21, r21
 368:	aa 27       	eor	r26, r26
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	aa 1f       	adc	r26, r26
 370:	a4 17       	cp	r26, r20
 372:	10 f0       	brcs	.+4      	; 0x378 <__utoa_common+0x14>
 374:	a4 1b       	sub	r26, r20
 376:	83 95       	inc	r24
 378:	50 51       	subi	r21, 0x10	; 16
 37a:	b9 f7       	brne	.-18     	; 0x36a <__utoa_common+0x6>
 37c:	a0 5d       	subi	r26, 0xD0	; 208
 37e:	aa 33       	cpi	r26, 0x3A	; 58
 380:	08 f0       	brcs	.+2      	; 0x384 <__utoa_common+0x20>
 382:	a9 5d       	subi	r26, 0xD9	; 217
 384:	a1 93       	st	Z+, r26
 386:	00 97       	sbiw	r24, 0x00	; 0
 388:	79 f7       	brne	.-34     	; 0x368 <__utoa_common+0x4>
 38a:	b1 11       	cpse	r27, r1
 38c:	b1 93       	st	Z+, r27
 38e:	11 92       	st	Z+, r1
 390:	cb 01       	movw	r24, r22
 392:	0c 94 cb 01 	jmp	0x396	; 0x396 <strrev>

00000396 <strrev>:
 396:	dc 01       	movw	r26, r24
 398:	fc 01       	movw	r30, r24
 39a:	67 2f       	mov	r22, r23
 39c:	71 91       	ld	r23, Z+
 39e:	77 23       	and	r23, r23
 3a0:	e1 f7       	brne	.-8      	; 0x39a <strrev+0x4>
 3a2:	32 97       	sbiw	r30, 0x02	; 2
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <strrev+0x18>
 3a6:	7c 91       	ld	r23, X
 3a8:	6d 93       	st	X+, r22
 3aa:	70 83       	st	Z, r23
 3ac:	62 91       	ld	r22, -Z
 3ae:	ae 17       	cp	r26, r30
 3b0:	bf 07       	cpc	r27, r31
 3b2:	c8 f3       	brcs	.-14     	; 0x3a6 <strrev+0x10>
 3b4:	08 95       	ret

000003b6 <_exit>:
 3b6:	f8 94       	cli

000003b8 <__stop_program>:
 3b8:	ff cf       	rjmp	.-2      	; 0x3b8 <__stop_program>
